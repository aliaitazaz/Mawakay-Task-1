import hashlib
import itertools
import string

def load_hashes(hash_file):
    """Load the password hashes from the hash file."""
    with open(hash_file, 'r') as file:
        return [line.strip() for line in file]

def load_dictionary(dictionary_file):
    """Load the dictionary words from the dictionary file."""
    with open(dictionary_file, 'r') as file:
        return [line.strip() for line in file]

def dictionary_attack(hashes, dictionary):
    """Attempt to crack the password hashes using a dictionary attack."""
    cracked_passwords = {}
    for word in dictionary:
        hashed_word = hashlib.md5(word.encode()).hexdigest()
        if hashed_word in hashes:
            cracked_passwords[hashed_word] = word
            print(f"Cracked: {hashed_word} -> {word}")
    return cracked_passwords

def brute_force_attack(hashes, max_length=4):
    """Attempt to crack the password hashes using a brute-force attack."""
    cracked_passwords = {}
    characters = string.ascii_letters + string.digits + string.punctuation
    for length in range(1, max_length + 1):
        for guess in itertools.product(characters, repeat=length):
            guess = ''.join(guess)
            hashed_guess = hashlib.md5(guess.encode()).hexdigest()
            if hashed_guess in hashes:
                cracked_passwords[hashed_guess] = guess
                print(f"Cracked: {hashed_guess} -> {guess}")
                hashes.remove(hashed_guess)
    return cracked_passwords

# File paths (as you've mentioned)
hash_file = "//Hash_path"
dictionary_file = "//Dictionary_path"

# Load the hashes and dictionary
hashes = load_hashes(hash_file)
dictionary = load_dictionary(dictionary_file)

print("Starting Dictionary Attack...")
dictionary_cracked = dictionary_attack(hashes, dictionary)

print("Starting Brute-Force Attack...")
brute_force_cracked = brute_force_attack([hash for hash in hashes if hash not in dictionary_cracked])

print("\nCracked Passwords:")
for hash, password in {**dictionary_cracked, **brute_force_cracked}.items():
    print(f"{hash} -> {password}")
